{"version":3,"sources":["square.js","App.js","index.js"],"names":["Square","props","useState","active","setActive","useEffect","clear","squareStyle","backgroundColor","className","onMouseEnter","e","color","style","App","gridSize","setGridSize","setColor","setClear","gridArray","num","arr","i","push","createGridArray","gridStyle","gridTemplateColumns","join","makeGridStyleArray","handleColor","target","value","onClick","map","id","type","min","max","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNA0BeA,EAxBA,SAACC,GACZ,MAA4BC,mBAAS,eAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,YACc,IAAhBJ,EAAMK,OACVF,EAAU,iBAEZ,CAACH,IAEH,IAIIM,EAAc,CACdC,gBAAiBL,GAGrB,OACI,qBAAKM,UAAU,SAASC,aATR,SAACC,GACjBP,EAAUH,EAAMW,QAQmCC,MAAON,KC0DnDO,MA1Ef,WACE,MAAgCZ,mBAAS,IAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAA0Bd,mBAAS,SAAnC,mBAAOU,EAAP,KAAcK,EAAd,KACA,EAA0Bf,oBAAS,GAAnC,mBAAOI,EAAP,KAAcY,EAAd,KAcIC,EAPoB,SAACC,GAEvB,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIF,EAAIA,EAAKE,IAC3BD,EAAIE,KAAKD,GAEX,OAAOD,EAEOG,CAAgBT,GAY1BU,EAAY,CAChBC,oBAXyB,SAACN,GAE1B,IADA,IAAIC,EAAM,GACDC,EAAE,EAAGA,EAAIF,EAAKE,IACrBD,EAAIE,KAAK,OAEX,OAAOF,EAAIM,KAAK,KAGGC,CAAmBb,IAUxCV,qBAAU,WACRa,GAAS,KACT,CAACZ,IAEH,IAAMuB,EAAc,SAAClB,GACnBM,EAASN,EAAEmB,OAAOC,QAGpB,OACE,qBAAKtB,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,+CACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,wBAAQA,UAAU,QAAQsB,MAAM,QAAQC,QAASH,EAAjD,mBACA,wBAAQpB,UAAU,MAAMsB,MAAM,MAAMC,QAASH,EAA7C,iBACA,wBAAQpB,UAAU,QAAQsB,MAAM,QAAQC,QAASH,EAAjD,mBACA,wBAAQpB,UAAU,OAAOsB,MAAM,OAAOC,QAASH,EAA/C,kBACA,wBAAQpB,UAAU,QAAQuB,QAtBhB,WAClBd,GAAS,IAqBD,sBAEF,sBAAKT,UAAU,cAAf,UACE,qBAAKA,UAAU,iBAAiBI,MAAOY,EAAvC,SACGN,EAAUc,KAAI,SAACC,GACd,OACE,cAAC,EAAD,CAAQ5B,MAAOA,EAAgBM,MAAOA,GAAXsB,QAIjC,uBAAOC,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMN,MAAOhB,EAAUuB,SA5D7C,SAAC3B,GACnBK,EAAYL,EAAEmB,OAAOC,OACrBb,GAAS,MA2DAH,EATH,MASgBA,cCjE1BwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.613218c9.chunk.js","sourcesContent":["import { useState,useEffect } from \"react\"\n\nconst Square = (props) => {\n    const [active, setActive] = useState('transparent')\n\n    useEffect(() => {\n        if (props.clear === true) {\n        setActive('transparent')\n        }\n    },[props])\n    \n    const handleEnter = (e) => {\n        setActive(props.color)\n    }\n\n    let squareStyle = {\n        backgroundColor: active\n    }\n\n    return (\n        <div className=\"square\" onMouseEnter={handleEnter} style={squareStyle}>\n\n        </div>\n    )\n}\n\nexport default Square","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Square from './square';\n\nfunction App() {\n  const [gridSize, setGridSize] = useState(25);\n  const [color, setColor] = useState('black');\n  const [clear, setClear] = useState(false);\n\n  const handleInput = (e) => {\n    setGridSize(e.target.value)\n    setClear(true)\n  }\n\n  const createGridArray = (num) => {\n    let arr = [];\n    for (let i = 0; i < num*num; i++) {\n      arr.push(i);\n    }\n    return arr\n  }\n  let gridArray = createGridArray(gridSize);\n\n  const makeGridStyleArray = (num) => {\n    let arr = [];\n    for (let i=0; i < num; i++){\n      arr.push('1fr')\n    }\n    return arr.join(' ')\n  }\n\n  let gridStyleArray = makeGridStyleArray(gridSize)\n  \n  const gridStyle = {\n    gridTemplateColumns: gridStyleArray,\n  }\n\n  const handleClear = () => {\n    setClear(true)\n  }\n\n  useEffect(() => {\n    setClear(false)\n  },[clear])\n\n  const handleColor = (e) => {\n    setColor(e.target.value)\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"body\">\n        <h1>Etch-a-Sketch</h1>\n        <div className=\"container\">\n          <div className=\"button-box\">\n            <button className=\"black\" value='black' onClick={handleColor}>Black</button>\n            <button className=\"red\" value='red' onClick={handleColor}>Red</button>\n            <button className=\"green\" value='green' onClick={handleColor}>Green</button>\n            <button className=\"blue\" value='blue' onClick={handleColor}>Blue</button>\n            <button className=\"clear\" onClick={handleClear}>Clear</button>\n          </div>\n          <div className=\"grid-slider\">\n            <div className='grid-container' style={gridStyle}>\n              {gridArray.map((id) => {\n                return (\n                  <Square clear={clear} key={id} color={color}/>\n                )\n              })}\n            </div>\n            <input type='range' min='1' max='100' value={gridSize} onChange={handleInput}/>\n            {gridSize} x {gridSize}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}
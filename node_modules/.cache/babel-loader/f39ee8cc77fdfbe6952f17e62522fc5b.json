{"ast":null,"code":"var _jsxFileName = \"/home/sean/odin-project/etch-a-sketch/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Square from './square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gridSize, setGridSize] = useState(25);\n  const [color, setColor] = useState('black');\n  const [clear, setClear] = useState(false);\n\n  const handleInput = e => {\n    setGridSize(e.target.value);\n  };\n\n  const createGridArray = num => {\n    let arr = [];\n\n    for (let i = 0; i < num * num; i++) {\n      arr.push(i);\n    }\n\n    return arr;\n  };\n\n  let gridArray = createGridArray(gridSize);\n\n  const makeGridStyleArray = num => {\n    let arr = [];\n\n    for (let i = 0; i < num; i++) {\n      arr.push('1fr');\n    }\n\n    return arr.join(' ');\n  };\n\n  let gridStyleArray = makeGridStyleArray(gridSize);\n  const gridStyle = {\n    gridTemplateColumns: gridStyleArray\n  };\n\n  const handleClear = () => {\n    setClear(true);\n  };\n\n  useEffect(() => {\n    setClear(false);\n  }, [clear]);\n\n  const handleColor = e => {\n    setColor(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Etch-a-Sketch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"black\",\n            value: \"black\",\n            onClick: handleColor,\n            children: \"Black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"red\",\n            value: \"red\",\n            onClick: handleColor,\n            children: \"Red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"red\",\n            value: \"red\",\n            onClick: handleColor,\n            children: \"Red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear\",\n            onClick: handleClear,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-slider\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-container\",\n            style: gridStyle,\n            children: gridArray.map(id => {\n              return /*#__PURE__*/_jsxDEV(Square, {\n                clear: clear,\n                color: color\n              }, id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"100\",\n            value: gridSize,\n            onChange: handleInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), gridSize]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rGCguptn6mVaGq6VSgzsbd92GJU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/sean/odin-project/etch-a-sketch/src/App.js"],"names":["useEffect","useState","Square","App","gridSize","setGridSize","color","setColor","clear","setClear","handleInput","e","target","value","createGridArray","num","arr","i","push","gridArray","makeGridStyleArray","join","gridStyleArray","gridStyle","gridTemplateColumns","handleClear","handleColor","map","id"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport Square from './square';\n\nfunction App() {\n  const [gridSize, setGridSize] = useState(25);\n  const [color, setColor] = useState('black');\n  const [clear, setClear] = useState(false);\n\n  const handleInput = (e) => {\n    setGridSize(e.target.value)\n  }\n\n  const createGridArray = (num) => {\n    let arr = [];\n    for (let i = 0; i < num*num; i++) {\n      arr.push(i);\n    }\n    return arr\n  }\n  let gridArray = createGridArray(gridSize);\n\n  const makeGridStyleArray = (num) => {\n    let arr = [];\n    for (let i=0; i < num; i++){\n      arr.push('1fr')\n    }\n    return arr.join(' ')\n  }\n\n  let gridStyleArray = makeGridStyleArray(gridSize)\n  \n  const gridStyle = {\n    gridTemplateColumns: gridStyleArray,\n  }\n\n  const handleClear = () => {\n    setClear(true)\n  }\n\n  useEffect(() => {\n    setClear(false)\n  },[clear])\n\n  const handleColor = (e) => {\n    setColor(e.target.value)\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"body\">\n        <h1>Etch-a-Sketch</h1>\n        <div className=\"container\">\n          <div className=\"button-box\">\n            <button className=\"black\" value='black' onClick={handleColor}>Black</button>\n            <button className=\"red\" value='red' onClick={handleColor}>Red</button>\n            <button className=\"red\" value='red' onClick={handleColor}>Red</button>\n\n            <button className=\"clear\" onClick={handleClear}>Clear</button>\n          </div>\n          <div className=\"grid-slider\">\n            <div className='grid-container' style={gridStyle}>\n              {gridArray.map((id) => {\n                return (\n                  <Square clear={clear} key={id} color={color}/>\n                )\n              })}\n            </div>\n            <input type='range' min='1' max='100' value={gridSize} onChange={handleInput}/>\n            {gridSize}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}